
#ifndef AMBER_COMPAT_ATOMIC_H
#define AMBER_COMPAT_ATOMIC_H

#cmakedefine HAS_STDATOMIC_H
#if defined(HAS_STDATOMIC_H)
/* Use stdatomic.h */
# include <Amber/compat/atomic/c11_stdatomic.h>
#elif defined(__GNUC__) 
/* Use __atomic builtins */
# include <Amber/compat/atomic/gnu_atomic_builtin.h>
#else
/* Use SDL atomics */
# include <Amber/compat/atomic/sdl_atomic.h>
#endif

/* API implemented in one of the above headers */
/* typedef ?? AB_atomic_int;
 * typedef ?? AB_atomic_uint;
 */
static inline
int  AB_atomic_load_int(AB_atomic_int *obj);
static inline
unsigned AB_atomic_load_uint(AB_atomic_uint *obj);
static inline
void AB_atomic_store_int(AB_atomic_int *obj, int desired);
static inline
void AB_atomic_store_uint(AB_atomic_uint *obj, unsigned desired);
static inline
void AB_atomic_init_int(AB_atomic_int *obj, int desired);
static inline
void AB_atomic_init_uint(AB_atomic_uint *obj, unsigned desired);
static inline
bool AB_atomic_compare_exchange_weak_int(AB_atomic_int *obj, int *expected, int desired);
static inline
bool AB_atomic_compare_exchange_weak_uint(AB_atomic_uint *obj, unsigned *expected, unsigned desired);

#endif /* AMBER_COMPAT_ATOMIC_H */
