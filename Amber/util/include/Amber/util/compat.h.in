/* @file compat.h
 * @brief compatibility definitions
 */
#ifndef AMBER_UTIL_COMPAT_H
#define AMBER_UTIL_COMPAT_H

/* AB_RESTRICT */
#include <Amber/util/AB_compiler_detection.h>

/* AB_INLINE */
/* c99 - inline */
#if __STDC_VERSION__ >= 199901L
# define AB_INLINE inline
/* glibc/MSVC - __inline */
#elif defined(__GNUC__) || defined(_MSVC_VER)
# define AB_INLINE __inline
#else
# define AB_INLINE
#endif

/* AB_EXPORT - visible to library users */
/* AB_LIB - visible within library, not outside of it */
#if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 302) && \
    defined(__ELF__)
# define AB_EXPORT extern
# define AB_LIB    __attribute__((__visibility__("hidden"))) extern
#elif _WIN32
# if defined(AB_BUILDING_LIB)
#  define AB_EXPORT __declspec(dllexport)
# else
#  define AB_EXPORT __declspec(dllimport)
# endif
# define AB_LIB extern
#else
# define AB_EXPORT extern
# define AB_LIB extern
#endif

/* strdup - duplicate a string */
#cmakedefine AB_HAS_STRDUP
#cmakedefine AB_HAS__STRDUP
#if defined(AB_HAS_STRDUP)
/* glibc - strdup */
# ifndef _GNU_SOURCE
#  define _GNU_SOURCE
# endif
# include <string.h>
# define AB_STRDUP(str) strdup(str)
#elif defined(AB_HAS__STRDUP)
/* Windows - _strdup */
# include <string.h>
# define AB_STRDUP(str) _strdup(str)
#else
/* Fallback - own implementation */
char *AB_strdup(const char *str);
# define AB_STRDUP(str) AB_strdup(str)
# define AB_NEED_STRDUP
#endif

/* asprintf - dynamically format a string */
#cmakedefine AB_HAS_ASPRINTF
#if defined(AB_HAS_ASPRINTF)
/* glibc - asprintf */
# ifndef _GNU_SOURCE
#  define _GNU_SOURCE
# endif
# include <stdio.h>
# define AB_ASPRINTF(...) asprintf(__VA_ARGS__)
#else
/* Fallback - own implementation */
int AB_asprintf(char **strp, const char *fmt, ...);
# define AB_ASPRINTF(...) AB_asprintf(__VA_ARGS__)
# define AB_NEED_ASPRINTF
#endif

/* vasprintf - dynamically format a string */
#cmakedefine AB_HAS_VASPRINTF
#if defined(AB_HAS_VASPRINTF)
/* glibc - vasprintf */
# ifndef _GNU_SOURCE
#  define _GNU_SOURCE
# endif
# include <stdarg.h>
# include <stdio.h>
# define AB_VASPRINTF(...) vasprintf(__VA_ARGS__)
#else
/* Fallback - own implementation */
# include <stdarg.h>
int AB_vasprintf(char **strp, const char *fmt, va_list va);
# define AB_VASPRINTF(...) AB_vasprintf(__VA_ARGS__)
# define AB_NEED_VASPRINTF
#endif

/* strtok_r - threadsafe tokenization of a string */
#cmakedefine AB_HAS_STRTOK_R
#if defined(AB_HAS_STRTOK_R)
/* POSIX - strtok_r */
# ifndef _GNU_SOURCE
#  define _GNU_SOURCE
# endif
# include <string.h>
# define AB_STRTOK_R(str, delim, ctx) strtok_r(str, delim, ctx)
#elif defined(AB_HAS_STRTOK_S)
/* Windows - strtok_s */
# include <string.h>
# define AB_STRTOK_R(str, delim, ctx) strtok_s(str, delim, ctx)
#else
/* Fallback - own implementation */
char *AB_strtok_r(char *str, const char *delim, char **saveptr);
# define AB_STRTOK_R(str, delim, ctx) AB_strtok_r(str, delim, ctx)
# define AB_NEED_STRTOK_R
#endif

/* va_copy - copy a va_list */
#cmakedefine AB_HAS_VA_COPY
#cmakedefine AB_HAS___VA_COPY
#if defined(AB_HAS_VA_COPY)
# include <stdarg.h>
# define AB_VA_COPY(dest, src) va_copy(dest, src)
#elif defined(AB_HAS___VA_COPY)
# include <stdarg.h>
# define AB_VA_COPY(dest, src) __va_copy(dest, src)
#else
/* Assume we can just do pointer assignment */
# define AB_VA_COPY(dest, src) ((dest) = (src))
#endif

/* printf - printf with positional arguments */
#cmakedefine AB_PRINTF_POSITIONAL
#cmakedefine AB_HAS__PRINTF_P
#if defined(AB_HAS__PRINTF_P)
/* Windows has a separate function for positional printf */
# include <stdio.h>
# define AB_PRINTF(...) _printf_p(__VA_ARGS__)
#elif defined(AB_PRINTF_POSITIONAL)
# include <stdio.h>
# define AB_PRINTF(...) printf(__VA_ARGS__)
#else
# error "No positional printf!"
#endif

/* getline - read a dynamically-allocated line from a FILE */
#cmakedefine AB_HAS_GETLINE
#if defined(AB_HAS_GETLINE)
/* Posix returns a 'ssize_t', cast to long because ssize_t isn't portable */
# ifndef _GNU_SOURCE
#  define _GNU_SOURCE
# endif
# include <stdio.h>
# define AB_GETLINE(lineptr, n, stream) (long)getline(lineptr, n, stream)
#else
/* Fallback - own implementation */
# include <stdio.h>
# include <stddef.h>
long AB_getline(char **lineptr, size_t *n, FILE *stream);
# define AB_GETLINE(lineptr, n, stream) AB_getline(lineptr, n, stream)
# define AB_NEED_GETLINE
#endif

#endif /* AMBER_UTIL_COMPAT_H */
